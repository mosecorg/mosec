name: PyPI Publish

on:
  release:
    types: [created]

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          rustup toolchain install nightly
          rustup component add rustfmt --toolchain nightly
      - name: Lint
        run: make lint

  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      max-parallel: 5
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        os: [ubuntu-latest , macos-latest]

    steps:
      - uses: actions/checkout@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          make dev
      - name: Test
        run: make test

  build:
    name: "Build PyPI Package"
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v2
      - name: Install latest stable rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build
        run: |
          bash ./scripts/prepare.sh
          bash ./scripts/build.sh
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels_${{ github.event.release.tag_name }}
          retention-days: 1
          path: dist

  publish:
    name: "Publish PyPI Package"
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels_${{ github.event.release.tag_name }}
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Publish PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
          ls
          twine upload *
      - name: Publish Crates
        env:
          CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}
        run: |
          cargo login $CRATES_TOKEN
          cargo publish
